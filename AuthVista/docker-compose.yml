services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: tadoba_postgres
    environment:
      POSTGRES_USER: tadoba_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_DB: tadoba_surveillance
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tadoba_user -d tadoba_surveillance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: tadoba_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tadoba_backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://tadoba_user:secure_password@postgres:5432/tadoba_surveillance
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: your-secret-key-change-in-production
      CORS_ORIGINS: http://localhost:5173,http://localhost:3000
    volumes:
      - ./backend:/app
      - ./snapshots:/app/snapshots
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:socket_app --host 0.0.0.0 --port 8000 --reload

  # YOLO Inference Worker
  inference:
    build:
      context: ./backend
      dockerfile: inference/Dockerfile
    container_name: tadoba_inference
    environment:
      BACKEND_URL: http://backend:8000
      MODEL_PATH: /app/models/yolov8n.pt
      CONFIDENCE_THRESHOLD: 0.5
      SNAPSHOT_DIR: /app/snapshots
    volumes:
      - ./backend/inference:/app/inference
      - ./snapshots:/app/snapshots
      - ./backend/models:/app/models
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # React Frontend (for production build)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: tadoba_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: tadoba_network
